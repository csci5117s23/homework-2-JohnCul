import { useRouter } from 'next/router';
import {useState, useEffect}from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import CategorySelector from '@/components/CategorySelector.js'
import {fetchItemData, updateCheckBox, fetchCategories} from '@/modules/Data.js'
import { useAuth, SignIn, UserButton } from "@clerk/nextjs";

export default function TodoID() {
    const [itemId, setItemId]=useState("");
    const [loading, setLoading]=useState(true);
    const [newCategory, setNewCategory]=useState("");
    const [newCategoryHidden, setNewCategoryHidden] = useState(true);
    const [text, setText]=useState("");
    const [data, setData]=useState(null);
    const [categories, setCategories]=useState([]);
    const [selectedCategory, setSelectedCategory]=useState("");
    const { isLoaded, userId, sessionId, getToken } = useAuth();
    const [checked, setChecked]=useState(false);
    const router = useRouter();

    function RedirectToHome(){
      router.push('/');
    }

    function handleChange(checkbox){
        const value = checkbox.target.checked;
        setChecked(value);
        // need to update database: need ID of todo item and value of the checked item
        // also need to update the list of items
        // async function updateItem(){
        //   if(userId){
        //     const token = await getToken({template: "codehooks"});
        //     let newPost = { ...data}
        //     newPost.checked = value;
        //     newPost = await updateCheckBox(newPost, token);
        //   }
        // }
        // updateItem();
      }

    useEffect(() => {
        setItemId(router.query.id);
    },[router.query]);

    useEffect(() => {
        async function setUp(){
            if(itemId && userId){
                const authToken = await getToken({template: "codehooks"});
                fetchItemData(itemId,userId, setData, authToken);
            }
        }
        setUp();
    },[itemId, userId]);

    useEffect(() => {
        if(data!=null){
            setText(data.description)
            setLoading(false);
            setSelectedCategory(data.category);
            setChecked(data.checked);
        }
    },[data]);

    //set category list when loaded
    useEffect(() => {
      async function loadCategories(){
        if(userId){
          const token = await getToken({template: "codehooks"});
          fetchCategories(setCategories, userId, token);
        }
      }
      loadCategories()
    }, [loading]);
// TODO: Make a submit button and make sure everything works correctly on the TODOS page too
function changeItem(){
  // need to update database: need ID of todo item and value of the checked item
  //       also need to update the list of items
  async function updateItem(){
    if(userId){
      const token = await getToken({template: "codehooks"});
      let newPost = { ...data}
      newPost.checked = checked;
      newPost.description = text;
      newPost.category = selectedCategory;
      newPost = await updateCheckBox(newPost, token);
    }
  }
  updateItem();

}


    if(loading){
      if(!userId){
        return <>
            <RedirectToHome/>
        </>
    }
        return(<span>loading...</span>)
    }else{
      if(!userId){
        return <>
            <RedirectToHome/>
        </>
      }
      return(
<>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="pure-g" id="menu">
            <div className="pure-u-3-4">
                <h1 className={styles.header}>EDIT ITEM</h1>
            </div>
            <div className="pure-u-1-4">
                <div className={styles.userButton}>
                    <UserButton></UserButton>
                </div>
            </div>
        </div>
      <main className={styles.main}>
      <div className={styles.individualtodoitem}>
      <div key={data.date} className="pure-g">
          <div key="categoryDesc" className="pure-u-1-5">
            Category
          </div>
          <div key="checkedDesc" className="pure-u-1-5">
            Completed
          </div>
          <div key="contentDesc" className="pure-u-3-5">
            Description
          </div>
        </div>
        </div>

      <div className={styles.individualtodoitem}>
      <div key={data.date} className="pure-g">
          <div key="category" className="pure-u-1-5">
            <CategorySelector loading={loading} categories={categories} selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory}/>
            <input id="newCategoryInput" maxLength="20" hidden={newCategoryHidden} className={styles.newtodoitem} value={newCategory} onChange={(e=>setNewCategory(e.target.value))}>
            </input> 
          </div>
          <div key="checked" className="pure-u-1-5">
            <input className = {styles.toDoCheckbox} type="checkbox" name="checkbox" id="checkboxOption" value={data.checked} defaultChecked={data.checked} onClick={handleChange.bind(this)}/>
          </div>
          <div key="content" className="pure-u-3-5">
            <div>
                <textarea  type="text" id="editDescription" className={styles.editDescriptionSpecific} value={text} onChange={(e=>setText(e.target.value))}>
                </textarea > 
            </div>
          </div>
          <button className="pure-button" onClick={changeItem}>Submit Edits</button>
        </div>
        </div>
      </main>
    </>
    )
    }

}